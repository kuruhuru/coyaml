{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coyaml","text":""},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation \u2192 installation.md  </li> <li>Quickstart \u2192 quickstart.md  </li> <li>Configuration &amp; Templates \u2192 configuration.md  </li> <li>Tutorials \u2192 tutorials/first-steps.md  </li> <li>API Reference \u2192 api/modules.md  </li> <li>Contributing \u2192 contributing.md  </li> <li>Changelog \u2192 changelog.md</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"configuration/","title":"Configuration &amp; Templates","text":"<pre><code>database:\n  user: ${{ env:DB_USER:default_user }}\n  init_sql: ${{ file:./scripts/init.sql }}\napp:\n  settings: ${{ yaml:./configs/extra.yaml }}\n  url: \"postgresql://${{ config:database.user }}@localhost/db\"\n</code></pre>"},{"location":"conributing/","title":"Contributing","text":""},{"location":"installation/","title":"Installation","text":"<p>```bash pip install coyaml</p>"},{"location":"quickstart/","title":"Quickstart","text":"<pre><code>from coyaml import YConfig, YConfigFactory\n\n# 1. Initialize\nconfig = YConfig()\nYConfigFactory.set_config(config)\n\n# 2. Load sources\nconfig.add_yaml_source(\"path/to/config.yaml\")\nconfig.add_env_source(\"path/to/.env\")\n\n# 3. Resolve templates\nconfig.resolve_templates()\n\n# 4. Access values\nprint(config.some.setting)\nprint(config[\"another.setting\"])\n\n# 5. Convert to Pydantic\nfrom pydantic import BaseModel\n\nclass Settings(BaseModel):\n    some: str\n    another: int\n\nsettings = config.to(Settings)\nprint(settings)\n</code></pre>"},{"location":"api/coyaml/","title":"Module <code>coyaml</code>","text":"<p>coyaml: Package for managing YAML configuration</p> <p>This package provides classes for working with configurations: - YConfig: Class for working with configuration, supporting various data sources. - YConfigFactory: Factory for creating and managing configuration singletons using optional keys.</p> Usage example <p>from coyaml import YConfig, YConfigFactory</p>"},{"location":"api/coyaml/#coyaml--create-configuration-and-load-data-from-files","title":"Create configuration and load data from files","text":"<p>config = YConfig() config.add_yaml_source('config.yaml') config.add_env_source('.env')</p>"},{"location":"api/coyaml/#coyaml--set-configuration-in-factory","title":"Set configuration in factory","text":"<p>YConfigFactory.set_config(config)</p>"},{"location":"api/coyaml/#coyaml--get-configuration-from-factory","title":"Get configuration from factory","text":"<p>config = YConfigFactory.get_config() print(config.get('some_key'))</p>"},{"location":"api/modules/","title":"API Reference","text":"<ul> <li>coyaml</li> </ul>"},{"location":"tutorials/advanced-features/","title":"Tutorial: Advanced Features","text":""},{"location":"tutorials/advanced-features/#environment-variables","title":"Environment Variables","text":"<ul> <li>Syntax: <code>${{ env:VAR[:DEFAULT] }}</code></li> <li>Behavior when missing / default provided</li> </ul>"},{"location":"tutorials/advanced-features/#file-yaml-inclusion","title":"File &amp; YAML Inclusion","text":"<ul> <li><code>${{ file:path/to.txt }}</code></li> <li><code>${{ yaml:other_config.yaml }}</code></li> </ul>"},{"location":"tutorials/advanced-features/#callable-injection","title":"Callable Injection","text":"<pre><code>services:\n  init: myapp.db.initialize_database\n</code></pre> <pre><code>fn = config.services.init.to_callable()\nfn()\n</code></pre>"},{"location":"tutorials/first-steps/","title":"Tutorial: First Steps","text":"<pre><code>from pydantic import BaseModel\nfrom coyaml import YConfig\n\nclass DBConfig(BaseModel):\n    url: str\n    user: str\n    password: str\n\nconfig = YConfig().add_yaml_source(\"config.yaml\")\ndb: DBConfig = config.database.to(DBConfig)\nprint(db.url, db.user)\n</code></pre>"}]}